Q1. Try the statements below in REPL. Please answer that there are correct or not and
explain the reasons.
  a. val id = 9527
Correct, and id's type is an Int.

  b. var number : Int = 5.6
Error. 
number's type is Int type, but 5.6 is floating-point.
the floating-point literal does not conform to the expected type Int.

  c. var title = "Hello Kotlin!"
Correct, title's type is a String.

  d. val content : String = null
Error.
content's type is a String, null cannot be a value of a non-null type String.

  e. val number : Double? = 556.6
Correct, Double? can be assign floating-point or null.

  f. var list: List<String>? = ​listOf​(null, null)
Error.
This list is only String list or null, so it's container should be a String not a null.
For example:
    var list: List<String>? = listOf("String1", "String2")  

  g. var list: List<String?>? = ​listOf​("Wayne", "Chen")
Correct.

  h. list.size
Error.
Because in condition <g.var list: List<String?>? = ​listOf​("Wayne", "Chen")>,
the type List<String?>? maybe is a null, need correcting to <list?.size>.

  i. list?.size
Correct.


Q2. Read the code below, choose the correct answer and explain the reason.
The code print is c."Your grace.". 
Because message.length is 39 that match to the when condition { <in 1..39> -> println("Your grace") }.

 
Q3. Read the code below, choose the correct answer and explain the reason.
The correct way to initialize is d. val array = Array(6) {1000.0.pow(it)}
The array's elements is generated by lambda { 1000.0.pow(array's index) }
so the array is: 
array[0] = 1000^0 = 1
array[1] = 1000^1 = 1000
array[2] = 1000^2 = 1000000
array[3] = 1000^3 = 1000000000
array[4] = 1000^4 = 1000000000000
array[5] = 1000^5 = 1000000000000000

and from this for Loop < for((i, value) in array.withIndex()) 
It can get the array each index and element value pass, 
and print it as
"1 ${unit[i]} = ${value.toLong()} bytes",which i is 0..5 ,value is array[i]
then we can get the output  


 



 